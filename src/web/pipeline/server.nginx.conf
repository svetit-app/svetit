upstream auth {
	server auth:8082; }
upstream space {
	server space:8083; }
upstream project {
	server project:8084; }
upstream space-proxy {
	server unix:/var/run/nginx-for-spaces.sock; }
upstream front-proxy {
	server unix:/var/run/nginx-for-front.sock; }

server {
	listen 80;
	server_name localhost;

	location /api/log/ {
		auth_request off;
		js_import headers.js;
		js_header_filter headers.headers_json_log;
		set $my_host $http_host;
		if ($http_x_forwarded_host) {
			set $my_host $http_x_forwarded_host;
		}
		return 200 'Hello $my_host';
	}

	location /_check_auth {
		internal;
		proxy_pass        http://auth/auth/token/introspect;
		proxy_method      GET;
		proxy_set_header  Host $http_host;
		proxy_set_header  Authorization $http_authorization;
		proxy_pass_header Authorization;
		proxy_set_header  Content-Length "";
		proxy_set_header  X-Original-URI $request_uri;
		proxy_pass_request_body off;
		proxy_ignore_headers  Cache-Control Expires Set-Cookie;
	}

	location /api/ {
		auth_request /_check_auth;
		auth_request_set $userId $upstream_http_x_user;
		if ($userId = false) {
			set $userId '';
		}

		auth_request_set $sessionId $upstream_http_x_session;
		if ($sessionId = false) {
			set $sessionId '';
		}

		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-ApiPrefix '/api';
		proxy_set_header X-User $userId;
		proxy_set_header X-Session $sessionId;

		# TODO: check and delete it
		location = /api/auth/token/refresh {
			proxy_pass http://auth/auth/token/refresh;
		}

		location /api/auth/ {
			auth_request off;
			proxy_pass http://auth/auth/;
		}

		location /api/user/ {
			proxy_pass http://auth/user/;
		}

		location ~ ^/api/(space|replace_to_another_ms_name)(/.*)?$ {
			proxy_redirect off;
			proxy_buffering off;
			proxy_cache off;
			proxy_cache_convert_head off;
			gzip_proxied off;

			proxy_pass http://$1/$1$2$is_args$args;
		}

		location /api/s/ {
			proxy_pass http://space-proxy/;
		}

		location ~ test {
			js_import headers.js;
			js_header_filter headers.headers_json_log;
			set $my_host $http_host;
			if ($http_x_forwarded_host) {
				set $my_host $http_x_forwarded_host;
			}
			return 200 'Hello "$my_host" user:"$http_x_user"';
		}
	}

	location / {
		proxy_set_header Host $http_host;
		proxy_pass http://front-proxy;
	}
}

# Space proxy
server {
	listen unix:/var/run/nginx-for-spaces.sock;

	location /_check_space {
		internal;
		proxy_pass        http://space/introspect;
		proxy_method      GET;
		proxy_set_header  Host $http_host;
		proxy_set_header  Authorization $http_authorization;
		proxy_pass_header Authorization;
		proxy_set_header  Content-Length "";
		proxy_set_header  X-Original-URI $request_uri;
		proxy_pass_request_body off;
		proxy_ignore_headers  Cache-Control Expires Set-Cookie;
	}

	location ~ ^/([^/]+)/(project|replace_to_another_ms_name)(/.*)?$ {
		auth_request /_check_space;
		auth_request_set $spaceId $upstream_http_x_space_id;
		if ($spaceId = false) {
			set $spaceId '';
		}

		auth_request_set $spaceRole $upstream_http_x_space_role;
		if ($spaceRole = false) {
			set $spaceRole '';
		}

		auth_request_set $saved_set_cookie $upstream_http_set_cookie;
		add_header Set-Cookie $saved_set_cookie;

		proxy_set_header X-Space-Id $spaceId;
		proxy_set_header X-Space-Role $spaceRole;

		proxy_redirect off;
		proxy_buffering off;
		proxy_cache off;
		proxy_cache_convert_head off;
		gzip_proxied off;

		proxy_pass http://$2/$2$3$is_args$args;
	}
}

# Frontend proxy

map $http_accept_language $accept_language {
	default    ru;
	~*^en      en;
	~*^ru      ru;
}

map $http_cookie $preferred_language {
	default $accept_language;
	"~*language=(?<language>(en|ru))" $language;
}

server {
	listen unix:/var/run/nginx-for-front.sock;

	# Statics
	set $front /app/$preferred_language;
	root $front;
	location = /favicon.ico { alias $front/favicon.ico; }
	location /assets { alias $front/assets; }
	location / {
		index index.html index.htm;
        try_files $uri /index.html?$args;
	}
}
