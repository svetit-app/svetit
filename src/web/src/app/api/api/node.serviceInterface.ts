/**
 * Svetit MS Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { GroupUser } from '../model/models';
import { GroupUsers } from '../model/models';
import { Node } from '../model/models';
import { NodeGroup } from '../model/models';
import { NodeGroups } from '../model/models';
import { NodeProject } from '../model/models';
import { NodeProjects } from '../model/models';
import { Nodes } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface NodeServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete group\&#39;s user
     * 
     * @param groupId Primary identifier (int)
     * @param userId Space User Id
     */
    groupUserDelete(groupId: number, userId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one groups\&#39;s user
     * 
     * @param groupId Primary identifier (int)
     * @param userId Space User Id
     */
    groupUserGet(groupId: number, userId: string, extraHttpRequestParams?: any): Observable<GroupUser>;

    /**
     * List all group\&#39;s users
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param groupId Group identifier
     */
    groupUserListGet(limit: number, start: number, groupId?: number, extraHttpRequestParams?: any): Observable<GroupUsers>;

    /**
     * Create a group\&#39;s user
     * 
     * @param groupUser 
     */
    groupUserPost(groupUser: GroupUser, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete node
     * 
     * @param id Node identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    nodeDelete(id: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one node
     * 
     * @param id Node identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    nodeGet(id: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<Node>;

    /**
     * Delete node\&#39;s group
     * 
     * @param nodeId Node identifier
     * @param groupId Primary identifier (int)
     */
    nodeGroupDelete(nodeId: string, groupId: number, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one node\&#39;s group
     * 
     * @param nodeId Node identifier
     * @param groupId Primary identifier (int)
     */
    nodeGroupGet(nodeId: string, groupId: number, extraHttpRequestParams?: any): Observable<NodeGroup>;

    /**
     * List all node\&#39;s groups
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param nodeId Node identifier
     */
    nodeGroupListGet(limit: number, start: number, nodeId?: string, extraHttpRequestParams?: any): Observable<NodeGroups>;

    /**
     * Create a node\&#39;s group
     * 
     * @param nodeGroup 
     */
    nodeGroupPost(nodeGroup: NodeGroup, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * List all nodes
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param spaceKey Space\&#39;s key for proxying
     */
    nodeListGet(limit: number, start: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<Nodes>;

    /**
     * Create a node
     * 
     * @param node 
     * @param spaceKey Space\&#39;s key for proxying
     */
    nodePost(node: Node, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete node\&#39;s project
     * 
     * @param nodeId Node identifier
     * @param projectId projectId for filtering
     */
    nodeProjectDelete(nodeId: string, projectId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one node\&#39;s project
     * 
     * @param nodeId Node identifier
     * @param projectId projectId for filtering
     */
    nodeProjectGet(nodeId: string, projectId: string, extraHttpRequestParams?: any): Observable<NodeProject>;

    /**
     * List all node\&#39;s projects
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param nodeId Node identifier
     */
    nodeProjectListGet(limit: number, start: number, nodeId?: string, extraHttpRequestParams?: any): Observable<NodeProjects>;

    /**
     * Create a node\&#39;s project
     * 
     * @param nodeProject 
     */
    nodeProjectPost(nodeProject: NodeProject, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update a node
     * 
     * @param node 
     * @param spaceKey Space\&#39;s key for proxying
     */
    nodePut(node: Node, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

}
