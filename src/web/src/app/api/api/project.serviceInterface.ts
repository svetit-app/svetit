/**
 * Svetit MS Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CcDi } from '../model/models';
import { CcDis } from '../model/models';
import { CcModeType } from '../model/models';
import { CcModeTypes } from '../model/models';
import { CcParam } from '../model/models';
import { CcParams } from '../model/models';
import { CcStatusCategories } from '../model/models';
import { CcStatusCategory } from '../model/models';
import { CcStatusType } from '../model/models';
import { CcStatusTypes } from '../model/models';
import { CcType } from '../model/models';
import { CcTypeDiType } from '../model/models';
import { CcTypeDiTypes } from '../model/models';
import { CcTypeParam } from '../model/models';
import { CcTypeParams } from '../model/models';
import { CcTypes } from '../model/models';
import { Code } from '../model/models';
import { Codes } from '../model/models';
import { ControlCircuit } from '../model/models';
import { ControlCircuits } from '../model/models';
import { Device } from '../model/models';
import { DeviceItem } from '../model/models';
import { DeviceItems } from '../model/models';
import { DevicePluginParam } from '../model/models';
import { DevicePluginParams } from '../model/models';
import { Devices } from '../model/models';
import { DiPluginParam } from '../model/models';
import { DiPluginParams } from '../model/models';
import { DiType } from '../model/models';
import { DiTypes } from '../model/models';
import { Measure } from '../model/models';
import { Measures } from '../model/models';
import { ParamType } from '../model/models';
import { ParamTypes } from '../model/models';
import { Plugin } from '../model/models';
import { Plugins } from '../model/models';
import { Project } from '../model/models';
import { ProjectParam } from '../model/models';
import { ProjectParams } from '../model/models';
import { Projects } from '../model/models';
import { SaveTimer } from '../model/models';
import { SaveTimers } from '../model/models';
import { Section } from '../model/models';
import { SectionParam } from '../model/models';
import { SectionParams } from '../model/models';
import { Sections } from '../model/models';
import { Translation } from '../model/models';
import { Translations } from '../model/models';
import { ValueView } from '../model/models';
import { ValueViews } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ProjectServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete Cc Di
     * 
     * @param ccId Cc identifier
     * @param diId Di identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccDiDelete(ccId: number, diId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Di
     * 
     * @param ccId Cc identifier
     * @param diId Di identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccDiGet(ccId: number, diId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcDi>;

    /**
     * List all Cc Dis
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param ccId Cc identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccDiListGet(limit: number, start: number, ccId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcDis>;

    /**
     * Create a Cc Di
     * 
     * @param ccDi 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccDiPost(ccDi: CcDi, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Mode Type
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccModeTypeDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Mode Type
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccModeTypeGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcModeType>;

    /**
     * List all CC mode types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param spaceKey Space\&#39;s key for proxying
     * @param ccTypeId CC Type Id for filtering
     * @param projectId ProjectId for filtering
     */
    ccModeTypeListGet(limit: number, start: number, spaceKey?: string, ccTypeId?: number, projectId?: string, extraHttpRequestParams?: any): Observable<CcModeTypes>;

    /**
     * Update a Cc Mode Type
     * 
     * @param ccModeType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccModeTypePatch(ccModeType: CcModeType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Cc Mode Type
     * 
     * @param ccModeType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccModeTypePost(ccModeType: CcModeType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Param
     * 
     * @param ccId Cc identifier
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccParamDelete(ccId: number, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Param
     * 
     * @param ccId Cc identifier
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccParamGet(ccId: number, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcParam>;

    /**
     * List all Cc Params
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param ccId Cc identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccParamListGet(limit: number, start: number, ccId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcParams>;

    /**
     * Create a Cc Param
     * 
     * @param ccParam 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccParamPost(ccParam: CcParam, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Status Category
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccStatusCategoryDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Status Category
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccStatusCategoryGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcStatusCategory>;

    /**
     * List all CC status categories
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccStatusCategoryListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcStatusCategories>;

    /**
     * Update a Cc Status Category
     * 
     * @param ccStatusCategory 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccStatusCategoryPatch(ccStatusCategory: CcStatusCategory, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Cc Status Category
     * 
     * @param ccStatusCategory 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccStatusCategoryPost(ccStatusCategory: CcStatusCategory, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Status Type
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccStatusTypeDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Status Type
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccStatusTypeGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcStatusType>;

    /**
     * List all CC status types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param ccTypeId CC Type Id
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccStatusTypeListGet(limit: number, start: number, ccTypeId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcStatusTypes>;

    /**
     * Update a Cc Status Type
     * 
     * @param ccStatusType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccStatusTypePatch(ccStatusType: CcStatusType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Cc Status Type
     * 
     * @param ccStatusType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccStatusTypePost(ccStatusType: CcStatusType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Type
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Type Di Type
     * 
     * @param ccTypeId CC Type Id
     * @param diTypeId Di Type Id
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeDiTypeDelete(ccTypeId: number, diTypeId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Type Di Type
     * 
     * @param ccTypeId CC Type Id
     * @param diTypeId Di Type Id
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeDiTypeGet(ccTypeId: number, diTypeId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcTypeDiType>;

    /**
     * List all Cc Type Di Types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param ccTypeId CC Type Id
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeDiTypeListGet(limit: number, start: number, ccTypeId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcTypeDiTypes>;

    /**
     * Create a Cc Type Di Type
     * 
     * @param ccTypeDiType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeDiTypePost(ccTypeDiType: CcTypeDiType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Type
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcType>;

    /**
     * List all CC types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcTypes>;

    /**
     * Delete Cc Type Param
     * 
     * @param ccTypeId CC Type Id
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeParamDelete(ccTypeId: number, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Type Param
     * 
     * @param ccTypeId CC Type Id
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeParamGet(ccTypeId: number, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcTypeParam>;

    /**
     * List all Cc Type Param
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param ccTypeId CC Type Id
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeParamListGet(limit: number, start: number, ccTypeId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<CcTypeParams>;

    /**
     * Create a Cc Type Param
     * 
     * @param ccTypeParam 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypeParamPost(ccTypeParam: CcTypeParam, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update a Cc Type
     * 
     * @param ccType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypePatch(ccType: CcType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Cc Type
     * 
     * @param ccType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    ccTypePost(ccType: CcType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Code
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    codeDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Code
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    codeGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<Code>;

    /**
     * List all codes
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    codeListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<Codes>;

    /**
     * Update a Code
     * 
     * @param code 
     * @param spaceKey Space\&#39;s key for proxying
     */
    codePatch(code: Code, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Code
     * 
     * @param code 
     * @param spaceKey Space\&#39;s key for proxying
     */
    codePost(code: Code, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Control Circuit
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    controlCircuitDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Control Circuit
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    controlCircuitGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<ControlCircuit>;

    /**
     * List all control circuits
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param sectionId sectionId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    controlCircuitListGet(limit: number, start: number, sectionId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<ControlCircuits>;

    /**
     * Update a Control Circuit
     * 
     * @param controlCircuit 
     * @param spaceKey Space\&#39;s key for proxying
     */
    controlCircuitPatch(controlCircuit: ControlCircuit, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Control Circuit
     * 
     * @param controlCircuit 
     * @param spaceKey Space\&#39;s key for proxying
     */
    controlCircuitPost(controlCircuit: ControlCircuit, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Device
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    deviceDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Device
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    deviceGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<Device>;

    /**
     * Delete Device Item
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    deviceItemDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Device Item
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    deviceItemGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<DeviceItem>;

    /**
     * List all device items
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param deviceId Device Id
     * @param spaceKey Space\&#39;s key for proxying
     */
    deviceItemListGet(limit: number, start: number, deviceId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<DeviceItems>;

    /**
     * Update a Device Item
     * 
     * @param deviceItem 
     * @param spaceKey Space\&#39;s key for proxying
     */
    deviceItemPatch(deviceItem: DeviceItem, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Device Item
     * 
     * @param deviceItem 
     * @param spaceKey Space\&#39;s key for proxying
     */
    deviceItemPost(deviceItem: DeviceItem, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * List all devices
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    deviceListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<Devices>;

    /**
     * Update a Device
     * 
     * @param device 
     * @param spaceKey Space\&#39;s key for proxying
     */
    devicePatch(device: Device, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Device Plugin Param
     * 
     * @param deviceId Device Id
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    devicePluginParamDelete(deviceId: number, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Device Plugin Param
     * 
     * @param deviceId Device Id
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    devicePluginParamGet(deviceId: number, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<DevicePluginParam>;

    /**
     * List all Device Plugin Param
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param deviceId Device Id
     * @param spaceKey Space\&#39;s key for proxying
     */
    devicePluginParamListGet(limit: number, start: number, deviceId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<DevicePluginParams>;

    /**
     * Create a Device Plugin Param
     * 
     * @param devicePluginParam 
     * @param spaceKey Space\&#39;s key for proxying
     */
    devicePluginParamPost(devicePluginParam: DevicePluginParam, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Device
     * 
     * @param device 
     * @param spaceKey Space\&#39;s key for proxying
     */
    devicePost(device: Device, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete DI Plugin Param
     * 
     * @param diTypeId Di Type Id
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    diPluginParamDelete(diTypeId: number, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one DI Plugin Param
     * 
     * @param diTypeId Di Type Id
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    diPluginParamGet(diTypeId: number, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<DiPluginParam>;

    /**
     * List all DI Plugin Param
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param diTypeId Di Type Id
     * @param spaceKey Space\&#39;s key for proxying
     */
    diPluginParamListGet(limit: number, start: number, diTypeId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<DiPluginParams>;

    /**
     * Create a DI Plugin Param
     * 
     * @param diPluginParam 
     * @param spaceKey Space\&#39;s key for proxying
     */
    diPluginParamPost(diPluginParam: DiPluginParam, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Di Type
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    diTypeDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Di Type
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    diTypeGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<DiType>;

    /**
     * List all di types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    diTypeListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<DiTypes>;

    /**
     * Update a Di Type
     * 
     * @param diType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    diTypePatch(diType: DiType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Di Type
     * 
     * @param diType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    diTypePost(diType: DiType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Measure
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    measureDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Measure
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    measureGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<Measure>;

    /**
     * List all measures
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    measureListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<Measures>;

    /**
     * Update a Measure
     * 
     * @param measure 
     * @param spaceKey Space\&#39;s key for proxying
     */
    measurePatch(measure: Measure, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Measure
     * 
     * @param measure 
     * @param spaceKey Space\&#39;s key for proxying
     */
    measurePost(measure: Measure, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete param type
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    paramTypeDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one param-type
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    paramTypeGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<ParamType>;

    /**
     * List all param types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    paramTypeListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<ParamTypes>;

    /**
     * Update a param type
     * 
     * @param paramType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    paramTypePatch(paramType: ParamType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a param type
     * 
     * @param paramType 
     * @param spaceKey Space\&#39;s key for proxying
     */
    paramTypePost(paramType: ParamType, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Plugin
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    pluginDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Plugin
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    pluginGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<Plugin>;

    /**
     * List all plugins
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    pluginListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<Plugins>;

    /**
     * Update a Plugin
     * 
     * @param plugin 
     * @param spaceKey Space\&#39;s key for proxying
     */
    pluginPatch(plugin: Plugin, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Plugin
     * 
     * @param plugin 
     * @param spaceKey Space\&#39;s key for proxying
     */
    pluginPost(plugin: Plugin, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete project
     * 
     * @param id Project identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    projectDelete(id: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one project
     * 
     * @param id Project identifier
     * @param key Project key
     * @param spaceKey Space\&#39;s key for proxying
     */
    projectGet(id?: string, key?: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<Project>;

    /**
     * List all projects
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param spaceKey Space\&#39;s key for proxying
     */
    projectListGet(limit: number, start: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<Projects>;

    /**
     * Delete Project Param
     * 
     * @param projectId projectId for filtering
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    projectParamDelete(projectId: string, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Project Param
     * 
     * @param projectId projectId for filtering
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    projectParamGet(projectId: string, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<ProjectParam>;

    /**
     * List all Project Params
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    projectParamListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<ProjectParams>;

    /**
     * Create a Project Param
     * 
     * @param projectParam 
     * @param spaceKey Space\&#39;s key for proxying
     */
    projectParamPost(projectParam: ProjectParam, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update a project
     * 
     * @param project 
     * @param spaceKey Space\&#39;s key for proxying
     */
    projectPatch(project: Project, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a project
     * 
     * @param project 
     * @param spaceKey Space\&#39;s key for proxying
     */
    projectPost(project: Project, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Save Timer
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    saveTimerDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Save Timer
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    saveTimerGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<SaveTimer>;

    /**
     * List all save timers
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    saveTimerListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<SaveTimers>;

    /**
     * Update a Save Timer
     * 
     * @param saveTimer 
     * @param spaceKey Space\&#39;s key for proxying
     */
    saveTimerPatch(saveTimer: SaveTimer, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Save Timer
     * 
     * @param saveTimer 
     * @param spaceKey Space\&#39;s key for proxying
     */
    saveTimerPost(saveTimer: SaveTimer, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete section
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    sectionDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one section
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    sectionGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<Section>;

    /**
     * List all sections
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    sectionListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<Sections>;

    /**
     * Delete Section Param
     * 
     * @param sectionId sectionId for filtering
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    sectionParamDelete(sectionId: number, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Section Param
     * 
     * @param sectionId sectionId for filtering
     * @param paramId Param identifier
     * @param spaceKey Space\&#39;s key for proxying
     */
    sectionParamGet(sectionId: number, paramId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<SectionParam>;

    /**
     * List all Section Params
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param sectionId sectionId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    sectionParamListGet(limit: number, start: number, sectionId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<SectionParams>;

    /**
     * Create a Section Param
     * 
     * @param sectionParam 
     * @param spaceKey Space\&#39;s key for proxying
     */
    sectionParamPost(sectionParam: SectionParam, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update a section
     * 
     * @param section 
     * @param spaceKey Space\&#39;s key for proxying
     */
    sectionPatch(section: Section, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a section
     * 
     * @param section 
     * @param spaceKey Space\&#39;s key for proxying
     */
    sectionPost(section: Section, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Translation
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    translationDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Translation
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    translationGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<Translation>;

    /**
     * List all translations
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param projectId projectId for filtering
     * @param spaceKey Space\&#39;s key for proxying
     */
    translationListGet(limit: number, start: number, projectId: string, spaceKey?: string, extraHttpRequestParams?: any): Observable<Translations>;

    /**
     * Update a Translation
     * 
     * @param translation 
     * @param spaceKey Space\&#39;s key for proxying
     */
    translationPatch(translation: Translation, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Translation
     * 
     * @param translation 
     * @param spaceKey Space\&#39;s key for proxying
     */
    translationPost(translation: Translation, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Value View
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    valueViewDelete(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Value View
     * 
     * @param id Primary identifier (int)
     * @param spaceKey Space\&#39;s key for proxying
     */
    valueViewGet(id: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<ValueView>;

    /**
     * List all value views
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param diTypeId Di Type Id
     * @param spaceKey Space\&#39;s key for proxying
     */
    valueViewListGet(limit: number, start: number, diTypeId: number, spaceKey?: string, extraHttpRequestParams?: any): Observable<ValueViews>;

    /**
     * Update a Value View
     * 
     * @param valueView 
     * @param spaceKey Space\&#39;s key for proxying
     */
    valueViewPatch(valueView: ValueView, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Value View
     * 
     * @param valueView 
     * @param spaceKey Space\&#39;s key for proxying
     */
    valueViewPost(valueView: ValueView, spaceKey?: string, extraHttpRequestParams?: any): Observable<{}>;

}
