/**
 * Svetit MS Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CcDi } from '../model/models';
import { CcDis } from '../model/models';
import { CcModeType } from '../model/models';
import { CcModeTypes } from '../model/models';
import { CcParam } from '../model/models';
import { CcParams } from '../model/models';
import { CcStatusCategories } from '../model/models';
import { CcStatusCategory } from '../model/models';
import { CcStatusType } from '../model/models';
import { CcStatusTypes } from '../model/models';
import { CcType } from '../model/models';
import { CcTypeDiType } from '../model/models';
import { CcTypeDiTypes } from '../model/models';
import { CcTypeParam } from '../model/models';
import { CcTypeParams } from '../model/models';
import { CcTypes } from '../model/models';
import { Code } from '../model/models';
import { Codes } from '../model/models';
import { ControlCircuit } from '../model/models';
import { ControlCircuits } from '../model/models';
import { Device } from '../model/models';
import { DeviceItem } from '../model/models';
import { DeviceItems } from '../model/models';
import { DevicePluginParam } from '../model/models';
import { DevicePluginParams } from '../model/models';
import { Devices } from '../model/models';
import { DiPluginParam } from '../model/models';
import { DiPluginParams } from '../model/models';
import { DiType } from '../model/models';
import { DiTypes } from '../model/models';
import { Measure } from '../model/models';
import { Measures } from '../model/models';
import { ParamType } from '../model/models';
import { ParamTypes } from '../model/models';
import { Plugin } from '../model/models';
import { Plugins } from '../model/models';
import { Project } from '../model/models';
import { ProjectParam } from '../model/models';
import { ProjectParams } from '../model/models';
import { Projects } from '../model/models';
import { SaveTimer } from '../model/models';
import { SaveTimers } from '../model/models';
import { Section } from '../model/models';
import { SectionParam } from '../model/models';
import { SectionParams } from '../model/models';
import { Sections } from '../model/models';
import { Translation } from '../model/models';
import { Translations } from '../model/models';
import { ValueView } from '../model/models';
import { ValueViews } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ProjectServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete Cc Di
     * 
     * @param ccId Cc identifier
     * @param diId Di identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcDiDelete(ccId: number, diId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Di
     * 
     * @param ccId Cc identifier
     * @param diId Di identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcDiGet(ccId: number, diId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<CcDi>;

    /**
     * List all Cc Dis
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccId Cc identifier
     */
    handlerCcDiListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, ccId: number, extraHttpRequestParams?: any): Observable<CcDis>;

    /**
     * Create a Cc Di
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccDi 
     */
    handlerCcDiPost(xUser: string, xSpaceId: string, xSpaceRole: string, ccDi: CcDi, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Mode Type
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcModeTypeDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Mode Type
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcModeTypeGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<CcModeType>;

    /**
     * List all CC mode types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccTypeId CC Type Id for filtering
     * @param projectId ProjectId for filtering
     */
    handlerCcModeTypeListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, ccTypeId?: number, projectId?: string, extraHttpRequestParams?: any): Observable<CcModeTypes>;

    /**
     * Update a Cc Mode Type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccModeType 
     */
    handlerCcModeTypePatch(xUser: string, xSpaceId: string, xSpaceRole: string, ccModeType: CcModeType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Cc Mode Type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccModeType 
     */
    handlerCcModeTypePost(xUser: string, xSpaceId: string, xSpaceRole: string, ccModeType: CcModeType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Param
     * 
     * @param ccId Cc identifier
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcParamDelete(ccId: number, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Param
     * 
     * @param ccId Cc identifier
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcParamGet(ccId: number, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<CcParam>;

    /**
     * List all Cc Params
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccId Cc identifier
     */
    handlerCcParamListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, ccId: number, extraHttpRequestParams?: any): Observable<CcParams>;

    /**
     * Create a Cc Param
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccParam 
     */
    handlerCcParamPost(xUser: string, xSpaceId: string, xSpaceRole: string, ccParam: CcParam, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Status Category
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcStatusCategoryDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Status Category
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcStatusCategoryGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<CcStatusCategory>;

    /**
     * List all CC status categories
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerCcStatusCategoryListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<CcStatusCategories>;

    /**
     * Update a Cc Status Category
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccStatusCategory 
     */
    handlerCcStatusCategoryPatch(xUser: string, xSpaceId: string, xSpaceRole: string, ccStatusCategory: CcStatusCategory, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Cc Status Category
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccStatusCategory 
     */
    handlerCcStatusCategoryPost(xUser: string, xSpaceId: string, xSpaceRole: string, ccStatusCategory: CcStatusCategory, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Status Type
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcStatusTypeDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Status Type
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcStatusTypeGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<CcStatusType>;

    /**
     * List all CC status types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccTypeId CC Type Id
     */
    handlerCcStatusTypeListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, ccTypeId: number, extraHttpRequestParams?: any): Observable<CcStatusTypes>;

    /**
     * Update a Cc Status Type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccStatusType 
     */
    handlerCcStatusTypePatch(xUser: string, xSpaceId: string, xSpaceRole: string, ccStatusType: CcStatusType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Cc Status Type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccStatusType 
     */
    handlerCcStatusTypePost(xUser: string, xSpaceId: string, xSpaceRole: string, ccStatusType: CcStatusType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Type
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcTypeDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Cc Type Di Type
     * 
     * @param ccTypeId CC Type Id
     * @param diTypeId Di Type Id
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcTypeDiTypeDelete(ccTypeId: number, diTypeId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Type Di Type
     * 
     * @param ccTypeId CC Type Id
     * @param diTypeId Di Type Id
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcTypeDiTypeGet(ccTypeId: number, diTypeId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<CcTypeDiType>;

    /**
     * List all Cc Type Di Types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccTypeId CC Type Id
     */
    handlerCcTypeDiTypeListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, ccTypeId: number, extraHttpRequestParams?: any): Observable<CcTypeDiTypes>;

    /**
     * Create a Cc Type Di Type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccTypeDiType 
     */
    handlerCcTypeDiTypePost(xUser: string, xSpaceId: string, xSpaceRole: string, ccTypeDiType: CcTypeDiType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Type
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcTypeGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<CcType>;

    /**
     * List all CC types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerCcTypeListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<CcTypes>;

    /**
     * Delete Cc Type Param
     * 
     * @param ccTypeId CC Type Id
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcTypeParamDelete(ccTypeId: number, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Cc Type Param
     * 
     * @param ccTypeId CC Type Id
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCcTypeParamGet(ccTypeId: number, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<CcTypeParam>;

    /**
     * List all Cc Type Param
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccTypeId CC Type Id
     */
    handlerCcTypeParamListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, ccTypeId: number, extraHttpRequestParams?: any): Observable<CcTypeParams>;

    /**
     * Create a Cc Type Param
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccTypeParam 
     */
    handlerCcTypeParamPost(xUser: string, xSpaceId: string, xSpaceRole: string, ccTypeParam: CcTypeParam, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update a Cc Type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccType 
     */
    handlerCcTypePatch(xUser: string, xSpaceId: string, xSpaceRole: string, ccType: CcType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Cc Type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param ccType 
     */
    handlerCcTypePost(xUser: string, xSpaceId: string, xSpaceRole: string, ccType: CcType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Code
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCodeDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Code
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerCodeGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<Code>;

    /**
     * List all codes
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerCodeListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<Codes>;

    /**
     * Update a Code
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param code 
     */
    handlerCodePatch(xUser: string, xSpaceId: string, xSpaceRole: string, code: Code, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Code
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param code 
     */
    handlerCodePost(xUser: string, xSpaceId: string, xSpaceRole: string, code: Code, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Control Circuit
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerControlCircuitDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Control Circuit
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerControlCircuitGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<ControlCircuit>;

    /**
     * List all control circuits
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param sectionId sectionId for filtering
     */
    handlerControlCircuitListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, sectionId: number, extraHttpRequestParams?: any): Observable<ControlCircuits>;

    /**
     * Update a Control Circuit
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param controlCircuit 
     */
    handlerControlCircuitPatch(xUser: string, xSpaceId: string, xSpaceRole: string, controlCircuit: ControlCircuit, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Control Circuit
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param controlCircuit 
     */
    handlerControlCircuitPost(xUser: string, xSpaceId: string, xSpaceRole: string, controlCircuit: ControlCircuit, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Device
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerDeviceDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Device
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerDeviceGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<Device>;

    /**
     * Delete Device Item
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerDeviceItemDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Device Item
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerDeviceItemGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<DeviceItem>;

    /**
     * List all device items
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param deviceId Device Id
     */
    handlerDeviceItemListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, deviceId: number, extraHttpRequestParams?: any): Observable<DeviceItems>;

    /**
     * Update a Device Item
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param deviceItem 
     */
    handlerDeviceItemPatch(xUser: string, xSpaceId: string, xSpaceRole: string, deviceItem: DeviceItem, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Device Item
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param deviceItem 
     */
    handlerDeviceItemPost(xUser: string, xSpaceId: string, xSpaceRole: string, deviceItem: DeviceItem, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * List all devices
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerDeviceListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<Devices>;

    /**
     * Update a Device
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param device 
     */
    handlerDevicePatch(xUser: string, xSpaceId: string, xSpaceRole: string, device: Device, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Device Plugin Param
     * 
     * @param deviceId Device Id
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerDevicePluginParamDelete(deviceId: number, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Device Plugin Param
     * 
     * @param deviceId Device Id
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerDevicePluginParamGet(deviceId: number, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<DevicePluginParam>;

    /**
     * List all Device Plugin Param
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param deviceId Device Id
     */
    handlerDevicePluginParamListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, deviceId: number, extraHttpRequestParams?: any): Observable<DevicePluginParams>;

    /**
     * Create a Device Plugin Param
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param devicePluginParam 
     */
    handlerDevicePluginParamPost(xUser: string, xSpaceId: string, xSpaceRole: string, devicePluginParam: DevicePluginParam, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Device
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param device 
     */
    handlerDevicePost(xUser: string, xSpaceId: string, xSpaceRole: string, device: Device, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete DI Plugin Param
     * 
     * @param diTypeId Di Type Id
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerDiPluginParamDelete(diTypeId: number, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one DI Plugin Param
     * 
     * @param diTypeId Di Type Id
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerDiPluginParamGet(diTypeId: number, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<DiPluginParam>;

    /**
     * List all DI Plugin Param
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param diTypeId Di Type Id
     */
    handlerDiPluginParamListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, diTypeId: number, extraHttpRequestParams?: any): Observable<DiPluginParams>;

    /**
     * Create a DI Plugin Param
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param diPluginParam 
     */
    handlerDiPluginParamPost(xUser: string, xSpaceId: string, xSpaceRole: string, diPluginParam: DiPluginParam, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Di Type
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerDiTypeDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Di Type
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerDiTypeGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<DiType>;

    /**
     * List all di types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerDiTypeListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<DiTypes>;

    /**
     * Update a Di Type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param diType 
     */
    handlerDiTypePatch(xUser: string, xSpaceId: string, xSpaceRole: string, diType: DiType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Di Type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param diType 
     */
    handlerDiTypePost(xUser: string, xSpaceId: string, xSpaceRole: string, diType: DiType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Measure
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerMeasureDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Measure
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerMeasureGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<Measure>;

    /**
     * List all measures
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerMeasureListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<Measures>;

    /**
     * Update a Measure
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param measure 
     */
    handlerMeasurePatch(xUser: string, xSpaceId: string, xSpaceRole: string, measure: Measure, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Measure
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param measure 
     */
    handlerMeasurePost(xUser: string, xSpaceId: string, xSpaceRole: string, measure: Measure, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete param type
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerParamTypeDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one param-type
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerParamTypeGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<ParamType>;

    /**
     * List all param types
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerParamTypeListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<ParamTypes>;

    /**
     * Update a param type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param paramType 
     */
    handlerParamTypePatch(xUser: string, xSpaceId: string, xSpaceRole: string, paramType: ParamType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a param type
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param paramType 
     */
    handlerParamTypePost(xUser: string, xSpaceId: string, xSpaceRole: string, paramType: ParamType, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Plugin
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerPluginDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Plugin
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerPluginGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<Plugin>;

    /**
     * List all plugins
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerPluginListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<Plugins>;

    /**
     * Update a Plugin
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param plugin 
     */
    handlerPluginPatch(xUser: string, xSpaceId: string, xSpaceRole: string, plugin: Plugin, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Plugin
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param plugin 
     */
    handlerPluginPost(xUser: string, xSpaceId: string, xSpaceRole: string, plugin: Plugin, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete project
     * 
     * @param id Project identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerProjectDelete(id: string, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one project
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param id Project identifier
     * @param key Project key
     */
    handlerProjectGet(xUser: string, xSpaceId: string, xSpaceRole: string, id?: string, key?: string, extraHttpRequestParams?: any): Observable<Project>;

    /**
     * List all projects
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerProjectListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<Projects>;

    /**
     * Delete Project Param
     * 
     * @param projectId projectId for filtering
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerProjectParamDelete(projectId: string, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Project Param
     * 
     * @param projectId projectId for filtering
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerProjectParamGet(projectId: string, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<ProjectParam>;

    /**
     * List all Project Params
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerProjectParamListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<ProjectParams>;

    /**
     * Create a Project Param
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectParam 
     */
    handlerProjectParamPost(xUser: string, xSpaceId: string, xSpaceRole: string, projectParam: ProjectParam, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update a project
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param project 
     */
    handlerProjectPatch(xUser: string, xSpaceId: string, xSpaceRole: string, project: Project, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a project
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param project 
     */
    handlerProjectPost(xUser: string, xSpaceId: string, xSpaceRole: string, project: Project, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Save Timer
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerSaveTimerDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Save Timer
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerSaveTimerGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<SaveTimer>;

    /**
     * List all save timers
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerSaveTimerListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<SaveTimers>;

    /**
     * Update a Save Timer
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param saveTimer 
     */
    handlerSaveTimerPatch(xUser: string, xSpaceId: string, xSpaceRole: string, saveTimer: SaveTimer, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Save Timer
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param saveTimer 
     */
    handlerSaveTimerPost(xUser: string, xSpaceId: string, xSpaceRole: string, saveTimer: SaveTimer, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete section
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerSectionDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one section
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerSectionGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<Section>;

    /**
     * List all sections
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerSectionListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<Sections>;

    /**
     * Delete Section Param
     * 
     * @param sectionId sectionId for filtering
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerSectionParamDelete(sectionId: number, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Section Param
     * 
     * @param sectionId sectionId for filtering
     * @param paramId Param identifier
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerSectionParamGet(sectionId: number, paramId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<SectionParam>;

    /**
     * List all Section Params
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param sectionId sectionId for filtering
     */
    handlerSectionParamListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, sectionId: number, extraHttpRequestParams?: any): Observable<SectionParams>;

    /**
     * Create a Section Param
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param sectionParam 
     */
    handlerSectionParamPost(xUser: string, xSpaceId: string, xSpaceRole: string, sectionParam: SectionParam, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update a section
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param section 
     */
    handlerSectionPatch(xUser: string, xSpaceId: string, xSpaceRole: string, section: Section, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a section
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param section 
     */
    handlerSectionPost(xUser: string, xSpaceId: string, xSpaceRole: string, section: Section, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Translation
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerTranslationDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Translation
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerTranslationGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<Translation>;

    /**
     * List all translations
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param projectId projectId for filtering
     */
    handlerTranslationListGet(limit: number, start: number, xUser: string, xSpaceId: string, xSpaceRole: string, projectId: string, extraHttpRequestParams?: any): Observable<Translations>;

    /**
     * Update a Translation
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param translation 
     */
    handlerTranslationPatch(xUser: string, xSpaceId: string, xSpaceRole: string, translation: Translation, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Translation
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param translation 
     */
    handlerTranslationPost(xUser: string, xSpaceId: string, xSpaceRole: string, translation: Translation, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete Value View
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerValueViewDelete(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get one Value View
     * 
     * @param id Primary identifier (int)
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerValueViewGet(id: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<ValueView>;

    /**
     * List all value views
     * 
     * @param limit How many items to return at one time (max 1000)
     * @param start Offset position
     * @param diTypeId Di Type Id
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     */
    handlerValueViewListGet(limit: number, start: number, diTypeId: number, xUser: string, xSpaceId: string, xSpaceRole: string, extraHttpRequestParams?: any): Observable<ValueViews>;

    /**
     * Update a Value View
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param valueView 
     */
    handlerValueViewPatch(xUser: string, xSpaceId: string, xSpaceRole: string, valueView: ValueView, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a Value View
     * 
     * @param xUser Authorized user
     * @param xSpaceId Current Space Id
     * @param xSpaceRole Current Space User Role
     * @param valueView 
     */
    handlerValueViewPost(xUser: string, xSpaceId: string, xSpaceRole: string, valueView: ValueView, extraHttpRequestParams?: any): Observable<{}>;

}
