# yaml

config_vars: @CONFIG_VAR_PATH@

components_manager:
    coro_pool:
        initial_size: 500             # Preallocate 500 coroutines at startup.
        max_size: 1000                # Do not keep more than 1000 preallocated coroutines.

    task_processors:                  # Task processor is an executor for coroutine tasks

        main-task-processor:          # Make a task processor for CPU-bound couroutine tasks.
            worker_threads: $worker-threads         # Process tasks in 4 threads.
            thread_name: main-worker  # OS will show the threads of this task processor with 'main-worker' prefix.

        fs-task-processor:            # Make a separate task processor for filesystem bound tasks.
            thread_name: fs-worker
            worker_threads: $worker-fs-threads

    default_task_processor: main-task-processor

    components:                       # Configuring components that were registered via component_list
        server:
            listener:                 # configuring the main listening socket...
                port: $server-port            # ...to listen on this port and...
                task_processor: main-task-processor    # ...process incoming requests on this task processor.
        logging:
            fs-task-processor: fs-task-processor
            loggers:
                default:
                    file_path: '@stderr'
                    level: $logger-level
                    overflow_behavior: discard  # Drop logs if the system is too busy to write them down.

        tracer:                              # Component that helps to trace execution times and requests in logs.
            service-name: auth

        dynamic-config:                      # Dynamic config storage options, do nothing
            fs-cache-path: ''
        dynamic-config-fallbacks:            # Load options from file and push them into the dynamic config storage.
            fallback-path: @CONFIG_FALLBACK_PATH@
        testsuite-support: {}

        http-client:
            fs-task-processor: fs-task-processor

        dns-client:
            fs-task-processor: fs-task-processor

        database:
          dbconnection: $db-url
          blocking_task_processor: fs-task-processor
          dns_resolver: async


        tokenizer: {}

        oidc:
          client-id: $oidc-client-id
          client-secret: $oidc-client-secret
          provider-url: $oidc-provider-url

        repository: {}
        main-service:
          web-login-path: /login
          web-logout-path: /logout

        tests-control:
            load-enabled: $is_testing
            path: /tests/{action}
            method: POST
            task_processor: main-task-processor
        handler-ping:
            path: /ping
            method: GET
            task_processor: main-task-processor
            throttling_enabled: false
            url_trailing_slash: strict-match

        handler-hello:                    # Finally! Our handler.
            path: /hello                  # Registering handler by URL '/hello'.
            method: GET,POST              # It will only reply to GET (HEAD) and POST requests.
            task_processor: main-task-processor  # Run it on CPU bound task processor

        handler-login:
          path: /auth/login
          method: GET
          task_processor: main-task-processor

        handler-login-callback:
          path: /auth/login/callback
          method: GET
          task_processor: main-task-processor

        handler-logout:
          path: /auth/logout
          method: GET
          task_processor: main-task-processor

        handler-logout-callback:
          path: /auth/logout/callback
          method: GET
          task_processor: main-task-processor

        handler-token-refresh:
          path: /auth/token/refresh
          method: POST
          task_processor: main-task-processor

        handler-token-introspect:
          path: /auth/token/introspect
          method: GET
          task_processor: main-task-processor
