#pragma once

#include "openapi_fwd.hpp"


    #include <cstdint>
    #include <optional>
    #include <string>
    #include <userver/chaotic/io/boost/uuids/uuid.hpp>
    #include <userver/chaotic/io/std/vector.hpp>


#include <userver/chaotic/type_bundle_hpp.hpp>























    
    
        
        namespace svetit {namespace api {
    


    
    
        
        struct CcDi {
    
        
    
        static constexpr auto kCcidMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kDiidMinimum =
            0;
    
    
    
    
    

    


            std::int64_t ccId
                    {  };std::int64_t diId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcDi & lhs,const svetit::api::CcDi & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcDi& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        CcDi Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcDi>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcDi& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct CcDis {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::CcDi> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcDis & lhs,const svetit::api::CcDis & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcDis& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        CcDis Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcDis>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcDis& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct CcModeType {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kCctypeidMinimum =
            1;
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };std::int64_t ccTypeId
                    {  };std::string key
                    {  };std::string name
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcModeType & lhs,const svetit::api::CcModeType & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcModeType& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        CcModeType Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcModeType>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcModeType& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct CcModeTypes {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::CcModeType> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcModeTypes & lhs,const svetit::api::CcModeTypes & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcModeTypes& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        CcModeTypes Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcModeTypes>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcModeTypes& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct CcParam {
    
        
    
        static constexpr auto kCcidMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kParamidMinimum =
            0;
    
    
    
    
    

    


            std::int64_t ccId
                    {  };std::int64_t paramId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcParam & lhs,const svetit::api::CcParam & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcParam& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        CcParam Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcParam>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcParam& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct CcParams {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::CcParam> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcParams & lhs,const svetit::api::CcParams & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcParams& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        CcParams Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcParams>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcParams& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct CcStatusCategory {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };boost::uuids::uuid projectId
                    {  };std::string key
                    {  };std::string name
                    {  };std::string color
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcStatusCategory & lhs,const svetit::api::CcStatusCategory & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcStatusCategory& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        CcStatusCategory Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcStatusCategory>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcStatusCategory& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct CcStatusCategories {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::CcStatusCategory> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcStatusCategories & lhs,const svetit::api::CcStatusCategories & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcStatusCategories& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        CcStatusCategories Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcStatusCategories>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcStatusCategories& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct CcStatusType {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kCctypeidMinimum =
            1;
    
    
    
    
    

    

    
        
    
        static constexpr auto kCategoryidMinimum =
            1;
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };std::int64_t ccTypeId
                    {  };std::int64_t categoryId
                    {  };std::string key
                    {  };std::string text
                    {  };bool inform
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcStatusType & lhs,const svetit::api::CcStatusType & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcStatusType& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        CcStatusType Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcStatusType>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcStatusType& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct CcStatusTypes {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::CcStatusType> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcStatusTypes & lhs,const svetit::api::CcStatusTypes & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcStatusTypes& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        CcStatusTypes Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcStatusTypes>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcStatusTypes& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct CcType {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };boost::uuids::uuid projectId
                    {  };std::string key
                    {  };std::string name
                    {  };std::string description
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcType & lhs,const svetit::api::CcType & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcType& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        CcType Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcType>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcType& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct CcTypeDiType {
    
        
    
        static constexpr auto kCctypeidMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kDitypeidMinimum =
            0;
    
    
    
    
    

    


            std::int64_t ccTypeId
                    {  };std::int64_t diTypeId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcTypeDiType & lhs,const svetit::api::CcTypeDiType & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcTypeDiType& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        CcTypeDiType Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcTypeDiType>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcTypeDiType& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct CcTypeDiTypes {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::CcTypeDiType> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcTypeDiTypes & lhs,const svetit::api::CcTypeDiTypes & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcTypeDiTypes& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        CcTypeDiTypes Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcTypeDiTypes>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcTypeDiTypes& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct CcTypeParam {
    
        
    
        static constexpr auto kCctypeidMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kParamidMinimum =
            0;
    
    
    
    
    

    


            std::int64_t ccTypeId
                    {  };std::int64_t paramId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcTypeParam & lhs,const svetit::api::CcTypeParam & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcTypeParam& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        CcTypeParam Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcTypeParam>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcTypeParam& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct CcTypeParams {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::CcTypeParam> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcTypeParams & lhs,const svetit::api::CcTypeParams & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcTypeParams& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        CcTypeParams Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcTypeParams>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcTypeParams& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct CcTypes {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::CcType> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::CcTypes & lhs,const svetit::api::CcTypes & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::CcTypes& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        CcTypes Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::CcTypes>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::CcTypes& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Code {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };boost::uuids::uuid projectId
                    {  };boost::uuids::uuid repositoryId
                    {  };std::string commitHash
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Code & lhs,const svetit::api::Code & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Code& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Code Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Code>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Code& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct Codes {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Code> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Codes & lhs,const svetit::api::Codes & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Codes& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Codes Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Codes>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Codes& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct ControlCircuit {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kTypeidMinimum =
            1;
    
    
    
    
    

    

    
        
    
        static constexpr auto kSectionidMinimum =
            1;
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };std::int64_t typeId
                    {  };std::int64_t sectionId
                    {  };std::string name
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::ControlCircuit & lhs,const svetit::api::ControlCircuit & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::ControlCircuit& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        ControlCircuit Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::ControlCircuit>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::ControlCircuit& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct ControlCircuits {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::ControlCircuit> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::ControlCircuits & lhs,const svetit::api::ControlCircuits & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::ControlCircuits& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        ControlCircuits Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::ControlCircuits>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::ControlCircuits& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Device {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        
    
        static constexpr auto kPluginidMinimum =
            1;
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };boost::uuids::uuid projectId
                    {  };std::int64_t pluginId
                    {  };std::string name
                    {  };std::int32_t checkIntervalMsec
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Device & lhs,const svetit::api::Device & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Device& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Device Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Device>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Device& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct DeviceItem {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kDeviceidMinimum =
            1;
    
    
    
    
    

    

    
        
    
        static constexpr auto kTypeidMinimum =
            1;
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };std::int64_t deviceId
                    {  };std::int64_t typeId
                    {  };std::string name
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::DeviceItem & lhs,const svetit::api::DeviceItem & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::DeviceItem& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        DeviceItem Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::DeviceItem>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::DeviceItem& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct DeviceItems {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::DeviceItem> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::DeviceItems & lhs,const svetit::api::DeviceItems & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::DeviceItems& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        DeviceItems Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::DeviceItems>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::DeviceItems& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct DevicePluginParam {
    
        
    
        static constexpr auto kDeviceidMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kParamidMinimum =
            0;
    
    
    
    
    

    


            std::int64_t deviceId
                    {  };std::int64_t paramId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::DevicePluginParam & lhs,const svetit::api::DevicePluginParam & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::DevicePluginParam& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        DevicePluginParam Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::DevicePluginParam>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::DevicePluginParam& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct DevicePluginParams {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::DevicePluginParam> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::DevicePluginParams & lhs,const svetit::api::DevicePluginParams & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::DevicePluginParams& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        DevicePluginParams Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::DevicePluginParams>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::DevicePluginParams& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Devices {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Device> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Devices & lhs,const svetit::api::Devices & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Devices& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Devices Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Devices>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Devices& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct DiPluginParam {
    
        
    
        static constexpr auto kDitypeidMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kParamidMinimum =
            0;
    
    
    
    
    

    


            std::int64_t diTypeId
                    {  };std::int64_t paramId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::DiPluginParam & lhs,const svetit::api::DiPluginParam & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::DiPluginParam& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        DiPluginParam Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::DiPluginParam>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::DiPluginParam& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct DiPluginParams {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::DiPluginParam> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::DiPluginParams & lhs,const svetit::api::DiPluginParams & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::DiPluginParams& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        DiPluginParams Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::DiPluginParams>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::DiPluginParams& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct DiType {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kMeasureidMinimum =
            1;
    
    
    
    
    

    

    
        
    
        static constexpr auto kSavetimeridMinimum =
            1;
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        enum class Mode {
            kReadonlyflag,
            kReadwriteflag,
            kReadonly,
            kReadwrite,
            kFile,
            kButton,
            kVideostream,};

        static constexpr Mode kModeValues [] = {
            Mode::kReadonlyflag,
            Mode::kReadwriteflag,
            Mode::kReadonly,
            Mode::kReadwrite,
            Mode::kFile,
            Mode::kButton,
            Mode::kVideostream,};
    

    
        enum class Savealgorithm {
            kOff,
            kImmediately,
            kBytimer,
            kBytimerorimmediately,};

        static constexpr Savealgorithm kSavealgorithmValues [] = {
            Savealgorithm::kOff,
            Savealgorithm::kImmediately,
            Savealgorithm::kBytimer,
            Savealgorithm::kBytimerorimmediately,};
    


            std::optional<std::int64_t> id
                    {  };std::int64_t measureId
                    {  };std::int64_t saveTimerId
                    {  };std::string key
                    {  };std::string name
                    {  };svetit::api::DiType::Mode mode
                    {  };svetit::api::DiType::Savealgorithm saveAlgorithm
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::DiType & lhs,const svetit::api::DiType & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::DiType::Mode& value);
        
    

    
    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::DiType::Savealgorithm& value);
        
    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::DiType& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    
        DiType::Mode Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::DiType::Mode>);
    

    

    
    
        
    

    
        DiType::Savealgorithm Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::DiType::Savealgorithm>);
    

    

    

    
        DiType Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::DiType>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        
            DiType::Mode FromString(std::string_view value,
                            USERVER_NAMESPACE::formats::parse::To<svetit::api::DiType::Mode>);

            
            DiType::Mode Parse(std::string_view value,
                            USERVER_NAMESPACE::formats::parse::To<svetit::api::DiType::Mode>);
        
    

    
    

    
        
            DiType::Savealgorithm FromString(std::string_view value,
                            USERVER_NAMESPACE::formats::parse::To<svetit::api::DiType::Savealgorithm>);

            
            DiType::Savealgorithm Parse(std::string_view value,
                            USERVER_NAMESPACE::formats::parse::To<svetit::api::DiType::Savealgorithm>);
        
    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::DiType::Mode& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    
    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::DiType::Savealgorithm& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::DiType& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        std::string ToString(svetit::api::DiType::Mode value);
    

    
    

    
        std::string ToString(svetit::api::DiType::Savealgorithm value);
    

    

    


    
    


    
    
        
        struct DiTypes {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::DiType> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::DiTypes & lhs,const svetit::api::DiTypes & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::DiTypes& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        DiTypes Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::DiTypes>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::DiTypes& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        // Common Error
        struct Error {
    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::int32_t code
                    {  };std::string message
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Error & lhs,const svetit::api::Error & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Error& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Error Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Error>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Error& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct Group {
    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        // CppStringWithFormat
    


            std::optional<std::int32_t> id
                    {  };std::string name
                    {  };std::string description
                    {  };std::optional<boost::uuids::uuid> spaceId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Group & lhs,const svetit::api::Group & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Group& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Group Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Group>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Group& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct GroupUser {
    
        
    
        static constexpr auto kNodeidMinimum =
            0;
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::int32_t nodeId
                    {  };std::string userId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::GroupUser & lhs,const svetit::api::GroupUser & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::GroupUser& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        GroupUser Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::GroupUser>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::GroupUser& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct GroupUsers {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::GroupUser> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::GroupUsers & lhs,const svetit::api::GroupUsers & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::GroupUsers& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        GroupUsers Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::GroupUsers>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::GroupUsers& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Groups {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Group> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Groups & lhs,const svetit::api::Groups & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Groups& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Groups Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Groups>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Groups& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Invitation {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
        static constexpr auto kRoleidMinimum =
            1;
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int32_t> id
                    {  };boost::uuids::uuid spaceId
                    {  };std::optional<std::string> creatorId
                    {  };std::string userId
                    {  };std::optional<std::int32_t> roleId
                    {  };std::optional<std::int64_t> createdAt
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Invitation & lhs,const svetit::api::Invitation & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Invitation& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Invitation Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Invitation>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Invitation& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct InvitationRole {
    
        
    
        static constexpr auto kRoleidMinimum =
            1;
    
    
    
    
    

    


            std::int32_t roleId
                    {  };

            
        };
    


    

    
    
    

    

    

    
        bool operator==(const svetit::api::InvitationRole & lhs,const svetit::api::InvitationRole & rhs);
    


    
    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::InvitationRole& value);
        
    


    
        
    
        
    
    
        
    

    

    

    

    
        InvitationRole Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::InvitationRole>);
    

    

    

    
    
    

    

    

    
        
    


    
        
    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::InvitationRole& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    

    


    
    


    
    
        
        struct Invitations {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Invitation> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Invitations & lhs,const svetit::api::Invitations & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Invitations& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Invitations Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Invitations>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Invitations& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Link {
    
        // CppStringWithFormat
    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<boost::uuids::uuid> id
                    {  };boost::uuids::uuid spaceId
                    {  };std::optional<std::string> creatorId
                    {  };std::string name
                    {  };std::optional<std::int64_t> createdAt
                    {  };std::int64_t expiredAt
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Link & lhs,const svetit::api::Link & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Link& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Link Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Link>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Link& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct Links {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Link> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Links & lhs,const svetit::api::Links & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Links& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Links Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Links>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Links& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Measure {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };boost::uuids::uuid projectId
                    {  };std::string name
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Measure & lhs,const svetit::api::Measure & rhs);
    


    
    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Measure& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Measure Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Measure>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Measure& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct Measures {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Measure> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Measures & lhs,const svetit::api::Measures & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Measures& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Measures Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Measures>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Measures& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Node {
    
        // CppStringWithFormat
    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<boost::uuids::uuid> id
                    {  };std::optional<boost::uuids::uuid> spaceId
                    {  };std::string name
                    {  };std::string description
                    {  };double latitude
                    {  };double longitude
                    {  };std::optional<std::int64_t> createdAt
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Node & lhs,const svetit::api::Node & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Node& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Node Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Node>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Node& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct NodeGroup {
    
        // CppStringWithFormat
    

    
        
    
        static constexpr auto kGroupidMinimum =
            0;
    
    
    
    
    

    


            boost::uuids::uuid nodeId
                    {  };std::int32_t groupId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::NodeGroup & lhs,const svetit::api::NodeGroup & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::NodeGroup& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        NodeGroup Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::NodeGroup>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::NodeGroup& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct NodeGroups {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::NodeGroup> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::NodeGroups & lhs,const svetit::api::NodeGroups & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::NodeGroups& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        NodeGroups Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::NodeGroups>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::NodeGroups& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct NodeProject {
    
        // CppStringWithFormat
    

    
        // CppStringWithFormat
    


            boost::uuids::uuid nodeId
                    {  };boost::uuids::uuid projectId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::NodeProject & lhs,const svetit::api::NodeProject & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::NodeProject& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        NodeProject Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::NodeProject>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::NodeProject& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct NodeProjects {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::NodeProject> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::NodeProjects & lhs,const svetit::api::NodeProjects & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::NodeProjects& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        NodeProjects Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::NodeProjects>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::NodeProjects& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Nodes {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Node> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Nodes & lhs,const svetit::api::Nodes & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Nodes& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Nodes Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Nodes>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Nodes& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct ParamType {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        enum class Valuetype {
            kInt,
            kBool,
            kFloat,
            kString,
            kBytes,
            kTime,
            kRange,
            kCombo,};

        static constexpr Valuetype kValuetypeValues [] = {
            Valuetype::kInt,
            Valuetype::kBool,
            Valuetype::kFloat,
            Valuetype::kString,
            Valuetype::kBytes,
            Valuetype::kTime,
            Valuetype::kRange,
            Valuetype::kCombo,};
    


            std::optional<std::int64_t> id
                    {  };std::optional<boost::uuids::uuid> projectId
                    {  };std::optional<boost::uuids::uuid> parentId
                    {  };std::string key
                    {  };std::string name
                    {  };std::string description
                    {  };svetit::api::ParamType::Valuetype valueType
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::ParamType & lhs,const svetit::api::ParamType & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::ParamType::Valuetype& value);
        
    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::ParamType& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    
        ParamType::Valuetype Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::ParamType::Valuetype>);
    

    

    

    
        ParamType Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::ParamType>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        
            ParamType::Valuetype FromString(std::string_view value,
                            USERVER_NAMESPACE::formats::parse::To<svetit::api::ParamType::Valuetype>);

            
            ParamType::Valuetype Parse(std::string_view value,
                            USERVER_NAMESPACE::formats::parse::To<svetit::api::ParamType::Valuetype>);
        
    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::ParamType::Valuetype& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::ParamType& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        std::string ToString(svetit::api::ParamType::Valuetype value);
    

    

    


    
    


    
    
        
        struct ParamTypes {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::ParamType> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::ParamTypes & lhs,const svetit::api::ParamTypes & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::ParamTypes& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        ParamTypes Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::ParamTypes>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::ParamTypes& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Plugin {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };boost::uuids::uuid projectId
                    {  };std::string name
                    {  };std::string description
                    {  };std::string key
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Plugin & lhs,const svetit::api::Plugin & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Plugin& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Plugin Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Plugin>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Plugin& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct Plugins {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Plugin> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Plugins & lhs,const svetit::api::Plugins & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Plugins& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Plugins Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Plugins>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Plugins& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Project {
    
        // CppStringWithFormat
    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        enum class Sync {
            kProjecttonode,
            kNodetoproject,};

        static constexpr Sync kSyncValues [] = {
            Sync::kProjecttonode,
            Sync::kNodetoproject,};
    


            std::optional<boost::uuids::uuid> id
                    {  };boost::uuids::uuid spaceId
                    {  };std::string key
                    {  };std::string name
                    {  };std::optional<std::string> description
                    {  };std::optional<std::int64_t> changedAt
                    {  };svetit::api::Project::Sync sync
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Project & lhs,const svetit::api::Project & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Project::Sync& value);
        
    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Project& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    
        Project::Sync Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Project::Sync>);
    

    

    

    
        Project Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Project>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        
            Project::Sync FromString(std::string_view value,
                            USERVER_NAMESPACE::formats::parse::To<svetit::api::Project::Sync>);

            
            Project::Sync Parse(std::string_view value,
                            USERVER_NAMESPACE::formats::parse::To<svetit::api::Project::Sync>);
        
    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Project::Sync& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Project& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    
        std::string ToString(svetit::api::Project::Sync value);
    

    

    


    
    


    
    
        
        struct ProjectParam {
    
        // CppStringWithFormat
    

    
        
    
        static constexpr auto kParamidMinimum =
            0;
    
    
    
    
    

    


            boost::uuids::uuid projectId
                    {  };std::int64_t paramId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::ProjectParam & lhs,const svetit::api::ProjectParam & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::ProjectParam& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        ProjectParam Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::ProjectParam>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::ProjectParam& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct ProjectParams {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::ProjectParam> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::ProjectParams & lhs,const svetit::api::ProjectParams & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::ProjectParams& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        ProjectParams Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::ProjectParams>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::ProjectParams& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Projects {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Project> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Projects & lhs,const svetit::api::Projects & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Projects& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Projects Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Projects>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Projects& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Role {
    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int32_t> id
                    {  };std::string name
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Role & lhs,const svetit::api::Role & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Role& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Role Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Role>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Role& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct Roles {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Role> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Roles & lhs,const svetit::api::Roles & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Roles& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Roles Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Roles>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Roles& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct SaveTimer {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };boost::uuids::uuid projectId
                    {  };std::int32_t intervalMsec
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::SaveTimer & lhs,const svetit::api::SaveTimer & rhs);
    


    
    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::SaveTimer& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        SaveTimer Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::SaveTimer>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::SaveTimer& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct SaveTimers {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::SaveTimer> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::SaveTimers & lhs,const svetit::api::SaveTimers & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::SaveTimers& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        SaveTimers Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::SaveTimers>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::SaveTimers& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Section {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };boost::uuids::uuid projectId
                    {  };std::string name
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Section & lhs,const svetit::api::Section & rhs);
    


    
    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Section& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Section Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Section>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Section& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct SectionParam {
    
        
    
        static constexpr auto kSectionidMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kParamidMinimum =
            0;
    
    
    
    
    

    


            std::int64_t sectionId
                    {  };std::int64_t paramId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::SectionParam & lhs,const svetit::api::SectionParam & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::SectionParam& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        SectionParam Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::SectionParam>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::SectionParam& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct SectionParams {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::SectionParam> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::SectionParams & lhs,const svetit::api::SectionParams & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::SectionParams& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        SectionParams Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::SectionParams>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::SectionParams& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Sections {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Section> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Sections & lhs,const svetit::api::Sections & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Sections& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Sections Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Sections>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Sections& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Space {
    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<boost::uuids::uuid> id
                    {  };std::string name
                    {  };std::string key
                    {  };bool requestsAllowed
                    {  };std::optional<std::int64_t> createdAt
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Space & lhs,const svetit::api::Space & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Space& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Space Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Space>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Space& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct SpaceParams {
    
        
    
    
    
    
    

    

    
        
    
        static constexpr auto kInvitationsizeMinimum =
            0;
    
    
    
    
    

    


            bool canCreate
                    {  };std::int32_t invitationSize
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::SpaceParams & lhs,const svetit::api::SpaceParams & rhs);
    


    
    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::SpaceParams& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    

    
        SpaceParams Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::SpaceParams>);
    

    

    

    
    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::SpaceParams& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    

    


    
    


    
    
        
        struct Spaces {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Space> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Spaces & lhs,const svetit::api::Spaces & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Spaces& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Spaces Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Spaces>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Spaces& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct Translation {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };boost::uuids::uuid projectId
                    {  };std::string lang
                    {  };std::string key
                    {  };std::string value
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::Translation & lhs,const svetit::api::Translation & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Translation& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        Translation Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Translation>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Translation& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct Translations {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::Translation> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Translations & lhs,const svetit::api::Translations & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Translations& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Translations Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Translations>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Translations& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct User {
    
        
    
    
    
    
    

    

    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
        static constexpr auto kRoleidMinimum =
            1;
    
    
    
    
    

    


            std::string userId
                    {  };boost::uuids::uuid spaceId
                    {  };bool isOwner
                    {  };std::int64_t joinedAt
                    {  };std::int32_t roleId
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::User & lhs,const svetit::api::User & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::User& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        User Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::User>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::User& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct UserInfo {
    
        // CppStringWithFormat
    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<boost::uuids::uuid> id
                    {  };std::string displayName
                    {  };std::string login
                    {  };std::string firstname
                    {  };std::string lastname
                    {  };std::string email
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::UserInfo & lhs,const svetit::api::UserInfo & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::UserInfo& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        UserInfo Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::UserInfo>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::UserInfo& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct UserInfos {
    
        
        
    
        
    

    


            std::vector<svetit::api::UserInfo> list
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    

    
        bool operator==(const svetit::api::UserInfos & lhs,const svetit::api::UserInfos & rhs);
    


    
    
    
    

    

    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::UserInfos& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    

    
        UserInfos Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::UserInfos>);
    

    

    

    
    
    
    

    

    

    

    

    
        
    


    
        
    
    
    

    

    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::UserInfos& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    

    


    
    


    
    
        
        struct Users {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::User> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::Users & lhs,const svetit::api::Users & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::Users& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        Users Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::Users>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::Users& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    


    
    


    
    
        
        struct ValueView {
    
        
    
        static constexpr auto kIdMinimum =
            0;
    
    
    
    
    

    

    
        
    
        static constexpr auto kDitypeidMinimum =
            1;
    
    
    
    
    

    

    
        
    
    
    
    
    

    

    
        
    
    
    
    
    

    


            std::optional<std::int64_t> id
                    {  };std::int64_t diTypeId
                    {  };std::string value
                    {  };std::string view
                    {  };

            
        };
    


    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        bool operator==(const svetit::api::ValueView & lhs,const svetit::api::ValueView & rhs);
    


    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::ValueView& value);
        
    


    
        
    
        
    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    
    
        
    

    

    

    

    
        ValueView Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::ValueView>);
    

    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        
    


    
        
    
    

    

    
    

    

    
    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::ValueView& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    

    

    
    

    

    
    

    

    
    

    

    

    


    
    


    
    
        
        struct ValueViews {
    
        
        
    
        
    

    

    
        
    
        static constexpr auto kTotalMinimum =
            0;
    
    
    
    
    

    


            std::vector<svetit::api::ValueView> list
                    {  };std::int64_t total
                    {  };

            
        };
    


    

    
    
    
    

    

    

    

    
    

    

    

    
        bool operator==(const svetit::api::ValueViews & lhs,const svetit::api::ValueViews & rhs);
    


    
    
    
    

    

    

    

    
    

    

    

    
        
            USERVER_NAMESPACE::logging::LogHelper& operator<<(USERVER_NAMESPACE::logging::LogHelper& lh, const svetit::api::ValueViews& value);
        
    


    
        
    
        
    
    
        
    
    
        
    

    

    

    

    

    

    
    
        
    

    

    

    

    
        ValueViews Parse(USERVER_NAMESPACE::formats::json::Value json,
                         USERVER_NAMESPACE::formats::parse::To<svetit::api::ValueViews>);
    

    

    

    
    
    
    

    

    

    

    
    

    

    

    
        
    


    
        
    
    
    

    

    

    

    
    

    

    

    
        USERVER_NAMESPACE::formats::json::Value Serialize(
            const svetit::api::ValueViews& value,
            USERVER_NAMESPACE::formats::serialize::To<USERVER_NAMESPACE::formats::json::Value>
        );
    

    

    
    
    
    

    

    

    

    
    

    

    

    




    
        } //api
} //svetit

        
    
